--[[
          ...                               .---:                                                                                             
         .%%%-                             *%%%#*                                                 :===                                        
         .%%%-    .::.  ... ...      ... .=%%%:.. ...     ..     .:.        .:..       .:.  ...  .=%%#..     ..:.      ...  .:                
         .%%%-  =#%%%%%*%%% -%%#    -%%#.*%%%%%%*.%%%.   *%%+ .*%%%%%+   -*%%%%%#=  :*%%%%%*%%%-.%%%%%%%: .+#%%%%%*-  :%%%:#%%:               
         .%%%- *%%#-::=#%%%  =%%*  .#%%: .=%%#....%%%.   *%%+ =%%#      *%%*-::=*=.:%%%=::-*%%%- .=%%#.. :%%%=::-#%%+ :%%%#+--                
         .%%%-.%%%:    :%%%   *%%= *%%-   -%%#   .%%%.   *%%+  +#%%#*- .%%%.       +%%+     #%%-  -%%#   *%%=    .%%%.:%%%:                   
    :=: .=%%%. #%%+   .*%%%    #%%*%%=    -%%#   .%%%-  .#%%+      *%%+ #%%=   :-. =%%#:   -%%%-  -%%#   =%%#.   +%%# :%%%                    
   -%%%%%%%%-  .*%%%##%%%%%    .#%%%+     -%%#    +%%%##%#%%+ =%%#*#%%- .*%%%#%%%*. =%%%##%%%%%-  .#%%%#: =#%%%#%%%+. :%%%                    
     :====:      .-===:.---     =%%*      .---     .-==-.:--:  .-===-      -===-.     :===- ---.    -==-    :-===:    .---                    
                               :%%#.                                                                                                          
                               ===.                                                                                                           
--]]

-- Jayfuscator V1.2.1 --

do return(function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,ba,bb,bc,bc,bc)local bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,ca,cb,cc,cd,ce,cf,cg,ch,ci,cj,ck,cl,cm,cn,co,cp,cq=123,68,57,29,85,73,29,58,92,57,48,36,13,16,28,60,46,70,58,86,97,19,66,16,99,30,51,87,15,97,32,27,48,61,46,32,35,56,97,41,96,80,70,26,53,97,29,68,23,94,49 while bc~=75 do if bd<=698 then if bd>=446 then if bd<=562 then if bd>=498 then if bd<=498 then bd=514 do bn=(function(cr,cs)if'number'==bp(cr)then return true else do return false end end end)end else if bd>520 then cq=math.floor bd=585 else bu=math.abs bd=562 end end else if bd<459 then bd=462 be=select else bp=type bd=498 end end else if bd>=654 then if bd>=671 then if bd>676 then bd=737 do ca={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,},{1,0,3,2,5,4,7,6,9,8,11,10,13,12,15,14,},{v,3,0,1,6,7,4,5,10,11,8,9,14,15,12,13,},{3,2,1,0,7,6,5,4,11,10,9,8,15,14,13,12,},{4,5,6,7,0,1,2,3,12,13,14,15,8,9,10,11,},{5,4,7,6,1,0,3,2,13,12,15,14,9,8,11,10,},{6,7,4,5,2,3,0,1,14,15,12,13,10,11,8,9,},{7,6,5,4,3,2,1,0,15,14,13,12,11,10,9,8,},{8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,g,},{9,8,11,10,13,12,15,14,1,0,3,2,5,4,7,6,},{10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5,},{11,10,9,8,15,14,13,12,3,w,1,0,7,6,5,4,},{12,13,14,15,8,9,z,11,4,5,6,7,0,1,2,3,},{13,12,15,14,9,8,11,j,5,4,7,6,1,0,3,2,},{14,15,12,13,10,y,8,9,6,7,4,5,2,3,0,1,},{15,14,13,12,11,10,9,c,7,6,r,4,m,2,1,0,},nil,nil}end else bd=698 do cb=br('','..',function(c,g,g,g)do return bw[bs(c,16)]end end)end end else bd=671 for c=0,255 do bw[c]=cf(c);end end else if bd>=605 then if bd<622 then bs=tonumber bd=629 else bw={}bd=654 end else bd=605 cm=(unpack or table.unpack)end end end else if bd<=191 then if bd<=114 then if bd>71 then bj=string.byte bd=130 else be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,ca,cb,cc,cd,ce,cf,cg,ch,ci,cj,ck,cl,cm,cn,co,cp,cq=nil bd=114 end else if bd<=130 then cf=string.char bd=157 else if bd>165 then do br=string.gsub end bd=238 else do ck=string.sub end bd=191 end end end else if bd<=314 then if bd<=238 then bh=string.rep bd=282 else if bd<312 then bd=314 by=table.concat else bq=table.insert bd=347 end end else if bd>=370 then if bd<396 then bd=402 bi=(getfenv or function()return _ENV end)else cp=setmetatable bd=446 end else cn=math.ldexp bd=370 end end end end else if bd<=1045 then if bd>=885 then if bd>=984 then if bd>=1012 then if bd>1019 then bf=function()local c do c=bj(cb,cl,cl)end cl=(cl+1);return c;end bd=1068 else bd=1045 cc=function()local c,g,j,m j,c,m,g=bj(cb,cl,(cl+3))cl=(cl+4);return((g*16777216)+(m*65536)+(c*256)+j);end end else bd=1012 cl=1 end else if bd<=885 then bd=924 bt=function(c,g,j,m,m)local m,r,v=60,66,28,70,97,96,28,87,23,53,86,13,35 while m~=39 do if r>=178 then if r>=193 then if r<233 then r=239 return v else m=39;end else r=193 do v=(v-v%1)end end else if r>=112 then if r>116 then do v=((g/bz[c])%bz[j])end r=178 else r=147 v=nil end else v=nil r=112 end end end end else if bd<952 then co=(bit_lib and bit_lib.bxor or function(c,g)c=c%(2^32)g=g%(2^32)local j,m=0,1 while c>0 and g>0 do local r,v=c%16,g%16 j=j+ca[r+1][v+1]*m c=(c-r)/16 g=(g-v)/16 m=m*16 end j=j+c*m+g*m return j end)bd=960 else do cg=function(c,g,j,m,m)local m m=((c/2^(g-1))%2^((j-1)-(g-1)+1))do return(m-m%1);end end end bd=984 end end end else if bd<=769 then if bd>744 then bd=809 cd=(2^k)else bd=769 do cj=''end end else if bd<=809 then bd=826 bz={[0]=1}else if bd>834 then bd=885 do for c=1,31 do bz[c]=ci do ci=(ci*2)end end end else bd=857 ci=2 end end end end else if bd<=1160 then if bd>=1123 then if bd<=1123 then bd=1138 bm=function(c,c,c)local c,g,j,k=54,59,97,54,50,78,22,18,81,88,87,34,29,34,85 while c~=41 do if g>=149 then if g>=164 then if g>171 then c=41;else g=206 return k;end else cl=(cl+j);g=164 end else if g<=59 then j,k=nil g=79 else if g<123 then g=126 j=cc()else k=cb:sub(cl,(cl+j-1))g=149 end end end end end else if bd<1153 then ce=function(...)return{...},be('#',...)end bd=1160 else bd=1203 bx={}end end else if bd>1077 then bd=1123 bg=function()local c,g,j,k,m,r,v,w=64,38,23,77,33,86,39,39,18,84,69,84,72,62,62,59,16 while c~=36 do if g>=197 then if g<=260 then if g>=242 then if g>250 then g=296 v=1 else g=260 j=(bt(0,w,20)*4294967296+k)end else r=bt(20,w,11)g=242 end else if g>=326 then if g>330 then break else g=348 return(m*(2^(r-1023))*(j/cd+v))end else g=326 if not(r~=0)then if not(j==0)then r=1 v=0 else return(m*0)end elseif not(r==2047)then else if not(j~=0)then do return(m*(0/0))end else return(m*(1/0))end end end end else if g<=67 then if g>45 then g=101 k=cc()else g=67 j,k,m,r,v,w=nil end else if g<=101 then g=117 w=cc()else if g<150 then g=153 if((k==0 and w==0))then return 0 end else g=197 do m=((-h)^bt(31,w,1))end end end end end end end else bk=function()local c,g c,g=bj(cb,cl,(cl+2))cl=(cl+2);do return((g*256)+c);end end bd=1106 end end else if bd>=1293 then if bd<=1293 then ch=function(c,g,h,j,j,j)local j,k,m,r,v m=bv j=c[56]k=c[113]v=c[161]r=c[19]do return function(...)local c,m,w,y,z,bh,bj,bk,bn w=1 do bj=-1 end bk=-1 c={}m={...}z=(be('#',...)-1)bh={}bn={}do for be=0,z do if(not(be<r))then c[(be-r)]=m[(be+1)];else bn[be]=m[(be+d)];end;end;end do y=(z-r+1)end while true do local d,y,be,bk,bp,bq,br,bs,bt,bu bp=j[w]bs=bp[69]bt=bp[84]do bk=bp[110]end bu=bp[30]be=bp[79]d=bp[9]do bq=bp[149]end br=bp[125]y=bp[138]if not(bs<48)then if not(bp[69]<72)then if not(bs>83)then if not(bs>77)then if not(bs>74)then do if not(bs>72)then local bt,bw bw=br bt=bn[bw]for by=(bw+1),bp[79]do bt=(bt..bn[by]);end;do bn[bk]=bt;end else if(bs<74)then do while((bn[bk]~=bn[be]))do w=br;break end end else bn[bp[138]]=(function()bn[bk]=ch(v[bu],nil,h);end)end end end else if not(bs<76)then if 76==bs then bn[bp[110]][bn[br]]=bn[be];else bn[bk]=(bn[br]+bn[be]);end else bn[bp[110]]=(bn[bp[125]]*bn[be]);end end else if not(bp[69]>o)then do if not(bs<79)then if(bs<80)then while(bn[bk]>bn[be])do w=br;break end else do bv[bk]=bn[bu]end end else j[w]=bx[d];w=br;end end else if not(bs>81)then local o,bt,bw,by bw=bk do o,by=ce(bn[bw](bn[(bw+1)]))end bj=(by+bw-1)bt=0 do for by=bw,bj do bt=(bt+1);do bn[by]=o[bt];end end;end else if(bp[69]<83)then do bn={};end do for o=0,z do if(o<r)then bn[o]=m[(o+b)];else break end;end;end else do g[br]=bn[bp[110]];end end end end end else if not(bs<90)then if not(bs<93)then if not(bp[69]<94)then if 94==bs then bv[bk]=bv[bu]else bn[bk]=bn[br]end else bn[bp[110]]=k[br]end else if not(bs<91)then if(bs>91)then if(bn[be]==bn[bk])then w=bp[125];end;else local b,m do b=bk end m={}do for o=1,#bh do local r do r=bh[o]end do for o=0,#r do local z,bt,bw z=r[o]bt=z[1]bw=z[2]if(bt==bn and bw>=b)then m[bw]=bt[bw];do z[1]=m;end end;end;end end;end end else if bk then do bk=false;end do bp[79]=br;end w=(w-1);else w=(w+br+be);end end end else if not(bs>86)then if not(bs<85)then if(bs>e)then local b,e e=bk b=br for m=e,b do bn[m]=c[(m-e)];end;else do bn[bk]=(not bn[br]);end end else local b,c,e,m b=bk c={bn[b]()}e=be do m=0 end for o=b,e do do m=(m+1);end bn[o]=c[m];end end else if not(bs<88)then if(bs>88)then bn[bk]=(bn[br]/bn[be]);else local b b=bk do return bn[b](cm(bn,(b+1),br))end;end else end end end end else if not(bs<x)then if not(bp[69]>65)then if not(bp[69]<63)then do if not(bs<64)then do if(bs<65)then bv[bk]={}else bn[bk]=bv[bu]end end else bn[bk]=(bn[br]/k[bp[79]]);end end else if not(bs>60)then if((bn[bk]<bn[be]))then w=br;end;else if not(bs~=61)then do j[w]=bx[d];end w=br;else bn[bp[110]]=(bn[br]^bn[be]);end end end else if not(bp[69]<69)then if not(bs<70)then if(bs>70)then bn[bk]=bn[br];elseif(not(bn[bk]<bn[be]))then w=br;end else bn[bp[110]]=(bn[br]*k[be]);end else if not(bs<67)then do if(bs>f)then bn[bk]=#bn[br];else w=br;end end else local b b={}if(#bh>0)then for c=1,#bh do local e e=bh[c]for c=0,#e do local f,m,o o=e[c]f=o[1]m=o[2]if(f==bn and m>=0)then b[m]=f[m]o[1]=b end end end end return bp[bk],bp[be];end end end else if not(bs<54)then if not(bs>56)then if not(bp[69]>54)then bn[bp[n]]=(bn[br]-bn[be]);else if(bs<56)then j[w]={[110]=3,[125]=3,[79]=9,[69]=bs-53,[9]=0};w=(w-1);else if bn[bk]then w=br;end;end end else if not(bs>57)then local b,c,e c=bk e={bn[c](cm(bn,c+1,br))}b=0 for f=c,be do b=(b+1);bn[f]=e[b];end else if(bs>58)then local b,c b=bp[110]c={}while#bh>0 do for e=1,#bh do local e=bh[e]for f=u,#e do local e=e[f]local f=e[1]local m=e[2]if f==bn and m>=0 then c[m]=f[m]e[1]=c end end end break end return bn[b],bn[(b+1)]else do do return bn[bp[i]]end end end end end else if not(bs<51)then if not(bs>51)then bn[y]=(function()bn[bk]=ch(v[bu],nil,h);end)else if(bp[69]<53)then bn[bk]=h[k[br]][k[bp[79]]];else for b=bk,br do bn[b]=nil;end;end end else do if not(bs>48)then local b,c,e b=bk e=bn[b]c=bn[(b+2)]if((c>0))then if((e>bn[b+1]))then do w=br;end else bn[(b+3)]=e;end elseif((e<bn[b+1]))then w=br;else bn[(b+3)]=e;end else if not(bs~=49)then do bn[bk]=-bn[br];end else do bn[bk]=(bn[br]%k[be]);end end end end end end end end else if not(bs>23)then do if not(bp[69]<12)then if not(bs<18)then if not(bs<21)then if not(bs>21)then local b,c b=bk c=bn[br]bn[(b+q)]=c;bn[b]=c[bn[be]];else if 22==bp[69]then do bn[bp[bp[110]]]=bn end else bn[bk]=ch(v[br],nil,h);end end else if not(bp[69]<19)then if(bs<20)then j[w]={[125]=20,[69]=bp[69]- -57,[79]=21,[9]=0,[110]=15};w=(w-1);else local b,c,e,f do e=bk end b,f=ce(bn[e](cm(bn,(e+1),br)))bj=(f+e-1)c=0 for f=e,bj do do c=(c+1);end bn[f]=b[c];end;end else do return bn[bp[149]][d]end end end else if not(bs<15)then do if not(bs<16)then if(bs<17)then h=bn[bp[bk]]else bn[bk]=(not(bp[125]==0));do w=(w+l);end end else bn[bk]=g[bp[125]];end end else if not(bs<13)then if not(bs~=13)then else bv[bp[110]]()end else local b,c b,c=ce(...)for c=1,bp[110]do bn[(c-1)]=b[c]end end end end else if not(bs<6)then if not(bp[69]>8)then if not(bs>ba)then h[k[br]]=bn[bk];else if 7==bp[69]then w=((k[bp[110]]<bn[be])and bp[125]or w)else w=((bn[bk]==bn[be])and bp[125]or w)end end else do if not(bs>9)then do bn[bk][k[br]]=bn[be];end else if 10==bs then bn[bp[110]]=nil;else bn[bp[138]]();end end end end else if not(bs>2)then do if not(bs<1)then if not(bs~=1)then k=bv[bk](k)else do bn[bk]=bn[bp[125]][k[be]];end end else bn[bk]=bn[br][bn[be]];end end else do if not(bs<4)then if(bs>4)then local b b=bk do return cm(bn,b,(b+br))end;else local b,c c=bp[110]b=bn[br]bn[(c+1)]=b;bn[c]=b[k[bp[79]]];end else local b,c,e b=bk c={bn[b](cm(bn,b+1,bj))}e=0 for f=b,bp[79]do e=(e+1);bn[f]=c[e];end end end end end end end else if not(bs>35)then if not(bs>29)then if not(bs>26)then if not(bp[69]<25)then if(bs>25)then local b,c do b=bp[110]end c={}if(#bh>0)then for e=1,#bh do local f f=bh[e]do for e=0,#f do local g,i,l l=f[e]g=l[1]i=l[2]if(g==bn and i>=0)then c[i]=g[i]do l[1]=c end end end end end end do return cm(bn,b,bj);end else if not bn[bk]then w=br;end;end else local b b=bp[110]bn[b]=bn[b](cm(bn,b+1,br));end else if not(bs<28)then if 28==bs then local b b=bk bn[b]=bn[b](bn[b+1]);else end else w=((bn[bk]<bn[be])and br or w)end end else do if not(bp[69]>32)then do if not(bs>30)then bn[bk]=bv[bu]else if(bp[69]>31)then local b b=bk bn[b]=bn[b](cm(bn,b+1,bj));else w=((k[bk]~=k[be])and bp[125]or w)end end end else if not(bs>33)then local b,c,e c=bp[110]e=bn[(c+2)]b=(bn[c]+e)bn[c]=b;if((e>0))then if(not(b>bn[c+1]))then w=br;do bn[(c+3)]=b;end end elseif(not(b<bn[c+1]))then w=br;bn[(c+3)]=b;end else if(bp[69]<35)then if(not(bn[bk]==k[bp[79]]))then w=br;end;else bn[bk]={};end end end end end else if not(bp[69]>41)then if not(bp[69]>38)then if not(bs<37)then if(bs>37)then bj=bp[bk];else bn[bk]=(bn[br]%bn[be]);end else bn[bk]=h[k[br]];end else if not(bs>39)then j[w]={[s]=0,[125]=12,[69]=bs-3,[9]=0,[p]=8};w=(w-1);else if(bs<41)then local b b=bn[bq][d]do bn[bp[149]][d]=(b..bn[bp[79]]);end else local b,c,d,e do b=bk end e=((be-1)*50)c=bn[b]d=br do for f=1,d do c[(e+f)]=bn[(b+f)]end;end end end end else if not(bs>44)then do if not(bs>42)then if not bn[be]then do bn[bk]=bn[be];end w=br;end;else if not(bs~=43)then if((k[bk]<bn[be]))then do w=br;end end;else bn[bk]=(bn[br]+k[be]);end end end else if not(bp[69]<46)then if(bs<47)then bv=bn else bn[bk][k[br]]=k[be];end else local b,c,d,e,f d=bk f=be e=(d+2)c={bn[d](bn[d+1],bn[e])}for g=1,f do do bn[(e+g)]=c[g]end end b=bn[(d+3)]if b then bn[e]=b else w=br;end;end end end end end end w=(w+1);end;end;end end bd=1332 else if bd<1358 then bd=1362 return ch(bo(bi()),{},bi())();else bc=75;end end else if bd>=1230 then if bd>1236 then bl={}bd=1293 else bd=1267 bv={}end else bd=1230 bo=function(b,c,c,c)local c,d,e,f,g,h,i,j=86,61,20,85,71,67,11,48,83,50,15,63,11,43,91,15,58,83,67,68,11,86,53,57,37,84 while c~=38 do if d>=281 then if d>=413 then if d>=472 then if d>=509 then if d>518 then c=38;else d=537 return h;end else d=509 h[113]=j end else if d<436 then d=445 j={}else d=472 for c=1,i do local k,l,m,n=69,56,37,27,20,64,53,44,34,57,22,48,76,39 while k~=43 do if l>=167 then if l>=191 then if l<229 then l=233 j[c]=m;else k=43;end else l=191 do if(not(n~=4))then do m=(not(bf()==0));end elseif(not(n~=2))then m=bg();elseif(not(n~=1))then m=bm();elseif(not(n~=0))then m=b[bm()];end;end end else if l<=56 then l=102 m,n=nil else if l<140 then do n=bf()end l=147 else l=167 m=nil end end end end end end end else if d<=305 then if d<299 then for b=1,cc()do g[b-1]=bo();end d=305 else d=340 h[161]=g;end else if d<376 then d=382 h[19]=bf();else do i=cc()end d=413 end end end else if d>=175 then if d>=241 then if d>247 then d=281 h[56]=e;else d=266 for b=a,cc()do local a,c,k,l,m,n=100,55,77,51,19,35,69,83,35,37,73,83,34,52,86,49,49,71,64,82,68,51,59,13,85 while a~=55 do if c<=278 then if c>=187 then if c<=214 then if c<206 then if 1==bf()then for o=1,bf()do l[92][o]={bf()==0,cc()}end end c=214 else k=cc()c=241 end else if c>=258 then if c<270 then m=cg(k,1,2)c=278 else c=308 l[76]=m end else c=258 n=cc()end end else if c>=120 then if c>123 then c=187 l[92]={};else l[84]=bf();c=161 end else if c>60 then c=120 l={{},nil,nil,nil}else k,l,m,n=nil c=71 end end end else if c>=454 then if c<=501 then if c>463 then do l[149]=-l[110]end c=522 else c=501 l[9]=cg(k,12,20);end else if c<=522 then l[138]=-l[79]c=557 else if c<583 then c=585 e[b]=l;else a=55;end end end else if c>=382 then if c>384 then c=454 do l[79]=cg(k,21,29);end else l[125]=cg(n,12,33);c=417 end else if c>312 then l[110]=cg(k,3,11);c=382 else c=349 l[69]=cg(n,1,11);end end end end end end end else if d>181 then d=241 do for a=(#bx+1),(#bx+f)do local b,c,k,l,m=69,68,16,71,75,48,76,20,35,92,87,37,51,47,85,93,39,84,49,63,11,80,73,87 while b~=51 do if c<=266 then if c>=201 then if c<=231 then if c<229 then c=231 do l=cc()end else do k[9]=bf();end c=248 end else if c<263 then do k[76]=cg(m,1,2);end c=266 else c=300 do k[69]=cg(l,bb,11);end end end else if c>=156 then if c<171 then k[84]=bf();c=180 else m=cc()c=201 end else if c>71 then k={}c=156 else k,l,m=nil c=117 end end end else if c<=366 then if c<=327 then if c<319 then c=327 k[110]=cg(m,3,11);else do k[30]=cg(m,12,20);end c=348 end else if c>353 then k[125]=cg(l,12,33);c=387 else k[79]=cg(m,21,29);c=366 end end else if c>=460 then if c>469 then break else c=499 bx[a]=k;end else if c<426 then k[149]=-k[110]c=429 else c=460 k[138]=-k[t]end end end end end end end else d=214 f=cc()end end else if d>=116 then if d>118 then d=175 h={}else d=143 do g={}end end else if d<75 then e,f,g,h,i,j=nil d=80 else d=116 e={}end end end end end end end end end end end end end)(1,1,8,1,85,67,7,1,110,10,52,1,3,110,80,110,1,5,79,79,0,2,2,60,11,10,6,1)end
